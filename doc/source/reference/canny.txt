.. _canny:

canny
*****


**Syntax:** :code:`canny(image, derivative sigma, lower threshold, upper threshold)`

Performs Canny edge detection. Skips the initial Gaussian blurring step, please perform it separately if you want to do it. Calculates image derivatives using convolution with derivative of Gaussian.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image to process.

derivative sigma [input]
~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** real

**Default value:** 1

Scale parameter for derivative calculation. Set to the preferred scale of edges that should be detected. Derivatives are calculated using convolutions with derivative of Gaussian function, and this parameter defines the standard deviation of the Gaussian.

lower threshold [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** real

Edges that have gradient magnitude below lower threshold value are discarded. Edges that have gradient magnitude between lower and upper thresholds are included in the result only if they touch some edge that has gradient magnitude above upper threshold.

upper threshold [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** real

Edges that have gradient magnitude above upper threshold value are always included in the result. Edges that have gradient magnitude between lower and upper thresholds are included in the result only if they touch some edge that has gradient magnitude above upper threshold.

