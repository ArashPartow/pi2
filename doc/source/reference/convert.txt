.. _convert:

convert
*******

There are 2 forms of this command.

:code:`convert(input image, output image, data type)`
=====================================================

Converts data type of input image.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

input image [input]
~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Input image.

output image [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** string

Output image.

data type [input]
~~~~~~~~~~~~~~~~~

**Data type:** string

Data type of the output image. Can be uint8, uint16, uint32, uint64, int8, int16, int32, int64, float32, or complex32.


:code:`convert(image, data type)`
=================================

Converts data type of an image.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image whose data type is to be converted.

data type [input]
~~~~~~~~~~~~~~~~~

**Data type:** string

Data type to convert to. Can be uint8, uint16, uint32, uint64, int8, int16, int32, int64, float32, or complex32.

