.. _copy:

copy
****

There are 2 forms of this command.

:code:`copy(input image, output image)`
=======================================

Copies input image to output image. If pixel data types are not the same, performs conversion.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

input image [input]
~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image, complex32 image

Input image.

output image [output]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, float32 image, int8 image, int16 image, int32 image, int64 image, complex32 image

Output image.


:code:`copy(source image, target image, location)`
==================================================

Copies pixel values from source image to target image to specified location. The size of the target image is not changed and out-of-bounds pixels are not copied. See also :ref:`set` command.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

source image [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image, complex32 image

Image that is copied to the target image.

target image [output]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image, complex32 image

Image whose values are set.

location [input]
~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Location where the target image is placed in the source image.

See also
--------

:ref:`scale`, :ref:`bin`, :ref:`scalelabels`
