#pragma once

#include <vector>

#include "argumentdatatype.h"
#include "distributor.h"

using std::vector;

namespace pilib
{

	class PISystem;

	/**
	Base class for commands that can distribute themselves to multiple processes.
	*/
	class Distributable
	{
	public:
		///**
		//Constructor
		//*/
		//Distributable(const string& name, const string& help, const vector<CommandArgumentBase>& extraArgs = {}) : CMDBASE(name, help, extraArgs)
		//{

		//}

		/**
		Method that calls pure runDistributed method and is overridden in some special commands.
		*/
		virtual void runDistributedInternal(PISystem* system, Distributor& distributor, vector<ParamVariant>& args) const;

		/**
		Run this command in distributed manner.
		*/
		virtual void runDistributed(Distributor& distributor, vector<ParamVariant>& args) const = 0;


		/**
		Calculate amount of extra memory required by the command as a fraction of total size of all input and output images.
		@return extraMemFactor so that total memory needed per node or process = sum((block size) * (pixel size in bytes)) * (1 + extraMemFactor), where the sum is taken over all argument images.
		*/
		virtual double calculateExtraMemory(vector<ParamVariant>& args) const
		{
			return 0.0;
		}

		/**
		This function is given coordinates of a block in reference image (first output image in argument list or first input if there are no outputs)
		and it determines the corresponding block in another argument image.
		If this method does nothing, it is assumed that the argument image can be divided similarly than the reference image.
		@param argIndex Index of argument image.
		@param readStart, readSize File position and size of data that is loaded from disk for the reference output. Relevant only for Input and InOut images.
		@param writeFilePos, writeImPos, writeSize File position, image position and size of valid data generated by the command for the given block. Relevant only for Output and InOut images.
		*/
		virtual void getCorrespondingBlock(vector<ParamVariant>& args, size_t argIndex, Vec3c& readStart, Vec3c& readSize, Vec3c& writeFilePos, Vec3c& writeImPos, Vec3c& writeSize) const
		{

		}
	};
}
